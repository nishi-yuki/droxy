#! /usr/bin/env python3
# vim :setfiletype python3

''' Droxy Prototype

Proxy設定をssidごとに行うツールdroxyのプロトタイプ版です。プロトタイプ版なので
日本語が多いです。コメントもゆるふわです。ゆるしてね。
'''

import argparse
import sys
DROXY_CMD_NAME = 'droxy'


def main():
    name_called = sys.argv[0]

    if name_called == DROXY_CMD_NAME:
        # コマンドのラッパーとしてではなくdroxy自体を呼び出された。
        droxy_cmd_handler()
    else:
        # 他のシェルコマンドのラッパーとしてソフトリンク経由で呼び出された。
        call_cmd(name_called)


def droxy_cmd_handler():
    """py:function:: droxy_cmd_handler()

    droxy_cmd_handlerはdroxyコマンドを呼び出されたときに実行される関数です。
    droxyコマンドはdroxy自体の操作を行います。
    """
    pass


def call_cmd(cmd_name: str):
    """py:function:: call_cmd(cmd_name)

    call_cmd は cmd_name で指定されたシェルコマンドにプロクシ設定を施した上で実行
    する関数です。

    :param str cmd_name: 呼び出すシェルコマンド
    :return: ステータスコード
    :rtype: int
    """
    pass


def command(name: str):
    """py:decorator:: command(name)
    command はシェルコマンドラッパー関数を登録するデコレータです。
    :param str name: コマンド名です。pythonの関数名で使用可能な文字集合とコマンド名
    として使用可能な文字集合は異なるため、このような引数を必要とします。
    """
